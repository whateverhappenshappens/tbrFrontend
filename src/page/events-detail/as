import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useState, useEffect } from "react";
import "react-datepicker/dist/react-datepicker.css";
import "./styles.css";
import { v4 as uuidv4 } from "uuid";
import { IoCalendarNumberSharp } from "react-icons/io5";
import { GeneratePresignedUrlforUpload } from "../../apis/s3_api/S3";
import { EventsAPI } from "../../apis/EventsAPI/EventsAPI";
import axios from "axios"; // Import axios for the upload
import toast from "react-hot-toast";
import {S3api} from "../../apis/s3_api/S3.js"

function App({ selectedEvent, setUpdateFormVisible }) {
  const [formData, setFormData] = useState({
    bannerLinkPC: "",
    bannerLinkMobile: "",
    eventMode: "",
    speakerImageLink: "",
    heading: "",
    subHeading: "",
    date: new Date(),
    aboutSpeaker: "",
    speakerSocialLink: "",
    speakerExperienceDetails: "",
    speakerName: "",
    youtubeLink: "",
    isActive: false,
  });

  const [uuid, setUuid] = useState(uuidv4());
  const [selectedFile, setSelectedFile] = useState(null); // For file selection
  const [preSignedUrl, setPreSignedUrl] = useState(""); // Store the pre-signed URL
  const [uploadStatus, setUploadStatus] = useState(""); // Track upload status
  const [uploadType, setUploadType] = useState(""); // Track the type of upload

  useEffect(() => {
    if (selectedEvent) {
      setFormData({
        bannerLinkPC: selectedEvent.bannerLinkPC,
        bannerLinkMobile: selectedEvent.bannerLinkMobile,
        eventMode: selectedEvent.mode,
        speakerImageLink: selectedEvent.speakerImg,
        heading: selectedEvent.heading,
        subHeading: selectedEvent.subHeading,
        date: new Date(selectedEvent.date),
        aboutSpeaker: selectedEvent.aboutSpeaker,
        speakerSocialLink: selectedEvent.speakerSocial,
        speakerExperienceDetails: selectedEvent.speakerExperience,
        speakerName: selectedEvent.speakerName,
        youtubeLink: selectedEvent.youtubeLink,
        isActive: selectedEvent.isActive,
      });
      setUuid(selectedEvent.uuid || uuidv4());
    }
  }, [selectedEvent]);

  const handleInputChange = (e) => {
    const { name, value } = e.target;

    setFormData((prevState) => ({
      ...prevState,
      [name]: value, // Keep the datetime-local format
    }));
  };

  const handleDateChange = (date) => {
    setFormData((prevState) => ({
      ...prevState,
      date,
    }));
  };

  const handleRadioChange = (e) => {
    const isActive = e.target.value === "true";
    setFormData((prevState) => ({
      ...prevState,
      isActive,
    }));
  };

  const handleFileChange = async (e, type) => {
    // Check if heading is provided before uploading
    if (!formData.heading.trim()) {
      toast.error("Please provide a heading before uploading.");
      return;
    }

    const file = e.target.files[0];
    const fileType = file.type;
    const extension = "." + fileType.split("/").pop();

    if (file) {
      try {
        // Replace spaces with underscores and remove special characters in the heading
        const sanitizedHeading = formData.heading
          .trim()
          .replace(/\s+/g, "_")
          .replace(/[^\w-]/g, "");

        // const date = formData.date;
        // const formattedHeading = `${sanitizedHeading}`;
        // const formattedDate = `${date}`;
        // const formattedType = `${type}`;
        // const formattedExtension = `${extension}`;

        console.log(formattedHeading,formattedDate,formattedType,formattedExtension)
        // Generate a pre-signed URL for the file upload
        const response = await S3api.GeneratePresignedUrlforUpload(urlData);
        const preSignedUrlForUpload=response.preSignedUrlForUpload;
        const fileNameForUpload = response.fileName;
        setSelectedFile(file);
        setPreSignedUrl(preSignedUrlForUpload); // Store the pre-signed URL
        setUploadType(type);
        // Update the formData with the URL of the uploaded file (optional)
        const fileName = fileNameForUpload;
        setFormData((prevState) => ({
          ...prevState,
          [type]: fileName,
        }));
        console.log(`Pre-signed URL generated: ${fileName}`);
      } catch (error) {
        console.error("Error generating pre-signed URL:", error);
      }
    }
  };

  const urlData = {
    formattedHeading : sanitizedHeading,
    formattedDate:formData.date,
    formattedType:file.type,
    formattedExtension:extension
  }
  console.log(urlData);
  const handleSelectForUploadClick = (type) => {
    document.getElementById(type).click();
  };

  const handleUpload = async () => {
    if (!selectedFile) {
      alert("Please select a file first.");
      return;
    }
    try {
      // Upload the file to the pre-signed URL
      console.log("the url is", preSignedUrl);
      console.log("Selected file type:", selectedFile.type);
      const res = await axios.put(preSignedUrl, selectedFile);
      setUploadStatus("File uploaded successfully!");
      console.log("File uploaded successfully!");
    } catch (error) {
      console.error("Error uploading file:", error);
      setUploadStatus("Failed");
    }
  };
  

  const handleSaveClick = async () => {
    // Prepare the data with the formatted date
    const formattedData = {
      ...formData,
      date: formData.date ? new Date(formData.date).toISOString() : "", // Convert to ISO string if date exists
    };

    console.log("Saving event data:", formattedData);

    try {
      const response = await EventsAPI.addEvent(formattedData);
      if (response.status === 200) {
        toast.success("Event added successfully!");
        setUpdateFormVisible(false);
      } else {
        toast.error("Failed to add event.");
      }
    } catch (error) {
      console.error("Error adding event:", error);
      toast.error("An error occurred while adding the event.");
    }
  };

  return (
    _jsxs("div", {
      className: "main",
      children: [
        _jsxs("div", {
          className: "inline-form",
          children: [
            _jsx("label", {
              htmlFor: "eventMode",
              children: "Event Mode:",
            }),
            _jsx("input", {
              type: "text",
              id: "eventMode",
              name: "eventMode",
              placeholder: "Event Mode",
              value: formData.eventMode,
              onChange: handleInputChange,
            }),
          ],
        }),
        _jsx("br", {}),
        _jsxs("div", {
          className: "inline-form",
          children: [
            _jsx("label", {
              htmlFor: "heading",
              children: "Heading:",
            }),
            _jsx("input", {
              type: "text",
              id: "heading",
              name: "heading",
              placeholder: "Heading",
              value: formData.heading,
              onChange: handleInputChange,
            }),
          ],
        }),
        _jsx("br", {}),
            _jsxs("div", {
              className: "inline-form",
              children: [
                _jsx("label", {
                  htmlFor: "subHeading",
                  children: "Sub Heading:"
                }),
                _jsx("input", {
                  type: "text",
                  id: "subHeading",
                  name: "subHeading",
                  placeholder: "Sub Heading",
                  value: formData.subHeading,
                  onChange: handleInputChange
                })
              ]
            }),
            _jsx("br", {}),
            _jsxs("div", {
              className: "inline-form",
              children: [
                _jsx("label", {
                  htmlFor: "date",
                  children: "Date:"
                }),
                _jsxs("div", {
                  className: "date-input-container",
                  children: [
                    _jsx("input", {
                      type: "datetime-local",
                      id: "date",
                      name: "date",
                      placeholder: "Date and time",
                      value: formData.date,
                      onChange: handleInputChange,
                      className: "date"
                    }),
                    _jsx("span", {
                      className: "calendar-icon",
                      children: _jsx(IoCalendarNumberSharp, {})
                    })
                  ]
                })
              ]
            }),
            _jsx("br", {}),
            _jsxs("div", {
              className: "inline-form",
              children: [
                _jsx("label", {
                  htmlFor: "speakerName",
                  children: "Speaker's Name:"
                }),
                _jsx("input", {
                  type: "text",
                  id: "speakerName",
                  name: "speakerName",
                  placeholder: "Speaker's Name",
                  value: formData.speakerName,
                  onChange: handleInputChange
                })
              ]
            }),
            _jsx("br", {}),
            _jsxs("div", {
              className: "inline-form",
              children: [
                _jsx("label", {
                  htmlFor: "aboutSpeaker",
                  children: "About Speaker:"
                }),
                _jsx("input", {
                  type: "text",
                  id: "aboutSpeaker",
                  name: "aboutSpeaker",
                  placeholder: "About Speaker",
                  value: formData.aboutSpeaker,
                  onChange: handleInputChange
                })
              ]
            }),
            _jsx("br", {}),
            _jsxs("div", {
              className: "inline-form",
              children: [
                _jsx("label", {
                  htmlFor: "speakerSocialLink",
                  children: "Speaker's Social Link:"
                }),
                _jsx("input", {
                  type: "text",
                  id: "speakerSocialLink",
                  name: "speakerSocialLink",
                  placeholder: "Speaker's Social Link",
                  value: formData.speakerSocialLink,
                  onChange: handleInputChange
                })
              ]
            }),
            _jsx("br", {}),
            _jsxs("div", {
              className: "inline-form",
              children: [
                _jsx("label", {
                  htmlFor: "speakerExperienceDetails",
                  children: "Speaker's Experience Details:"
                }),
                _jsx("input", {
                  type: "text",
                  id: "speakerExperienceDetails",
                  name: "speakerExperienceDetails",
                  placeholder: "Speaker's Experience Details",
                  value: formData.speakerExperienceDetails,
                  onChange: handleInputChange
                })
              ]
            }),
            _jsx("br", {}),
            _jsxs("div", {
              className: "inline-form",
              children: [
                _jsx("label", {
                  htmlFor: "youtubeLink",
                  children: "YouTube Link:"
                }),
                _jsx("input", {
                  type: "text",
                  id: "youtubeLink",
                  name: "youtubeLink",
                  placeholder: "YouTube Link",
                  value: formData.youtubeLink,
                  onChange: handleInputChange
                })
              ]
            }),
            _jsx("br", {}),
            _jsxs("div", {
              className: "inline-form",
              children: [
                _jsx("label", {
                  children: "Is Active:"
                }),
                _jsxs("div", {
                  children: [
                    _jsxs("label", {
                      children: [
                        _jsx("input", {
                          type: "radio",
                          name: "isActive",
                          value: "true",
                          checked: formData.isActive === true,
                          onChange: handleRadioChange
                        }),
                        "\u00A0 Yes"
                      ]
                    }),
                    "\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0\u00A0",
                    _jsxs("label", {
                      children: [
                        _jsx("input", {
                          type: "radio",
                          name: "isActive",
                          value: "false",
                          checked: formData.isActive === false,
                          onChange: handleRadioChange
                        }),
                        "\u00A0 No"
                      ]
                    })
                  ]
                })
              ]
            }),
            _jsx("br", {}),
            _jsxs("div", {
              className: "inline-form",
              children: [
                _jsx("label", {
                  htmlFor: "bannerLinkPC",
                  children: "PC Banner Link:"
                }),
                _jsx("input", {
                  type: "file",
                  id: "bannerLinkPC",
                  name: "bannerLinkPC",
                  onChange: (e) => handleFileChange(e, "bannerLinkPC", ""),
                  style: { display: "none" }
                }),
                _jsx("button", {
                  onClick: () => handleSelectForUploadClick("bannerLinkPC"),
                  children: "Select"
                }),
                _jsx("button", {
                  onClick: handleUpload,
                  children: "Upload"
                }),
                _jsx("p", {
                  children: uploadStatus
                })
              ]
            }),
            _jsx("br", {}),
            _jsxs("div", {
              className: "inline-form",
              children: [
                _jsx("label", {
                  htmlFor: "bannerLinkMobile",
                  children: "Mobile Banner Link:"
                }),
                _jsx("input", {
                  type: "file",
                  id: "bannerLinkMobile",
                  name: "bannerLinkMobile",
                  onChange: (e) => handleFileChange(e, "bannerLinkMobile"),
                  style: { display: "none" }
                }),
                _jsx("button", {
                  onClick: () => handleSelectForUploadClick("bannerLinkMobile"),
                  children: "Select"
                }),
                _jsx("button", {
                  onClick: handleUpload,
                  children: "Upload"
                }),
                _jsx("p", {
                  children: uploadStatus
                })
              ]
            }),
            _jsx("br", {}),
            _jsxs("div", {
              className: "inline-form",
              children: [
                _jsx("label", {
                  htmlFor: "speakerImageLink",
                  children: "Speaker Image:"
                }),
                _jsx("input", {
                  type: "file",
                  id: "speakerImageLink",
                  name: "speakerImageLink",
                  onChange: (e) => handleFileChange(e, "speakerImageLink"),
                  style: { display: "none" }
                }),
                _jsx("button", {
                  onClick: () => handleSelectForUploadClick("speakerImageLink"),
                  children: "Select"
                }),
                _jsx("button", {
                  onClick: handleUpload,
                  children: "Upload"
                }),
                _jsx("p", {
                  children: uploadStatus
                })
              ]
            }),
            _jsx("br", {}),
            _jsxs("div", {
              className: "update-form-btn-container",
              children: [
                _jsx("button", {
                  className: "apply_button1",
                  onClick: () => setUpdateFormVisible(false),
                  children: "Cancel"
                }),
                _jsx("button", {
                  className: "apply_button",
                  onClick: handleSaveClick,
                  children: "Save"
                })
              ]
            })
      ],
    })
  );
}

export default App;

//import { api } from "../configs/axiosConfigs";
// export const GeneratePresignedUrlforUpload = async function generatePresignedUrlforUpload(urlData) {
//     console.log("generate the pre-sign URL for upload");
//     try {
//         console.log("Generating the pre-sign URL for upload");
//         const res = await api.post("/v1.5/s3/get-presigned-url-for-upload", null, { urlData: { objectKey: key } });
//         console.log("S3 response:", res.data);
//         return res.data; // Return the pre-signed URL directly
//     }
//     catch (error) {
//         console.error(`An error occurred while fetching signed URL -> ${error.status}`);
//         throw error; // Re-throw the error if needed
//     }
// };

export const S3api = {
    GeneratePresignedUrlforUpload : async function (urlData) {
         console.log("generate the pre-sign URL for upload");
         try {
             console.log("Generating the pre-sign URL for upload");
             const res = await api.request({
                 url:`/v1.5/s3/get-presigned-url-for-upload`,
                 method: "POST",
                 data:urlData
                 
             })
             console.log("this is urlData",urlData);
             return res.data; // Return the pre-signed URL directly
         }
         catch (error) {
             console.error(`An error occurred while fetching signed URL -> ${error.status}`);
             throw error; // Re-throw the error if needed
         }
    }
 };
 
 
